# -*- coding: utf-8 -*-
"""intent_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q3evFfojDHjj8g9zIyeV8iGOab8bNR7j
"""

# prompt: A Python script implementing the intent classification model for toutche models

import random

# Sample intent data (replace with your actual)
queries = ["What electric bicycle models do you offer?",
           "Tell me about the features of Heileo M100",
           "How much does the Heileo X200 cost?",
           "Where can I buy Toutche bikes?",
           "Can I schedule a test ride?",
           "My e-bike isn't charging properly",
           # Add more examples for each intent
           ]
intents = {
    "ask_bike_models": ["electric bicycle models", "bike options"],
    "ask_bike_features": ["features", "Heileo M100"],
    "ask_pricing": ["cost", "price", "Heileo X200"],
    "ask_dealer_location": ["buy", "where to buy", "Toutche bikes"],
    "request_test_ride": ["schedule a test ride", "test ride"],
    "technical_support": ["e-bike isn't charging", "not working"],
    # Corresponding intents for each query
}


def classify_intent(user_input):
    """
    Classifies the intent of the user input.

    Args:
        user_input (str): The user's input text.

    Returns:
        str: The predicted intent.
        float: confidence of prediction (this example has a very simple confidence score).
    """
    user_input = user_input.lower()
    best_intent = None
    best_confidence = 0.0

    for intent, keywords in intents.items():  # intents is now a dictionary
        # Basic keyword matching with improved keyword handling
        for keyword in keywords:
            if keyword in user_input:
                # Simple confidence - could be improved significantly
                confidence = random.uniform(0.6, 1)  # Replace with your confidence calculation.
                if confidence > best_confidence:
                    best_confidence = confidence
                    best_intent = intent
                break  # if keyword is present, check for next intent

    if best_intent is None:
        return "unknown", 0.0  # No intent found
    return best_intent, best_confidence


# Example usage
user_input = "Hi there, how are you doing today?"
intent, confidence = classify_intent(user_input)
print(f"User input: {user_input}")
print(f"Predicted intent: {intents}")
print(f"Confidence: {confidence}")

user_input = "Where is my order?"
intent, confidence = classify_intent(user_input)
print(f"User input: {user_input}")
print(f"Predicted intent: {intents}")
# prompt: A Python script implementing the intent classification model for toutche models

import random

# Sample intent data (replace with your actual)
queries = ["What electric bicycle models do you offer?",
           "Tell me about the features of Heileo M100",
           "How much does the Heileo X200 cost?",
           "Where can I buy Toutche bikes?",
           "Can I schedule a test ride?",
           "My e-bike isn't charging properly",
           # Add more examples for each intent
           ]
intents = {
    "ask_bike_models": ["electric bicycle models", "bike options"],
    "ask_bike_features": ["features", "Heileo M100"],
    "ask_pricing": ["cost", "price", "Heileo X200"],
    "ask_dealer_location": ["buy", "where to buy", "Toutche bikes"],
    "request_test_ride,": ["schedule a test ride", "test ride"],
    "technical_support": ["e-bike isn't charging", "not working"],
    # Corresponding intents for each query
}


def classify_intent(user_input):
    """
    Classifies the intent of the user input.

    Args:
        user_input (str): The user's input text.

    Returns:
        str: The predicted intent.
        float: confidence of prediction (this example has a very simple confidence score).
    """
    user_input = user_input.lower()
    best_intent = None
    best_confidence = 0.0

    for intent, keywords in intents.items():  # intents is now a dictionary
        # Basic keyword matching with improved keyword handling
        for keyword in keywords:
            if keyword in user_input:
                # Simple confidence - could be improved significantly
                confidence = random.uniform(0.6, 1)  # Replace with your confidence calculation.
                if confidence > best_confidence:
                    best_confidence = confidence
                    best_intent = intent
                break  # if keyword is present, check for next intent

    if best_intent is None:
        return "unknown", 0.0  # No intent found
    return best_intent, best_confidence


# Example usage
user_input = "Hi there, how are you doing today?"
intent, confidence = classify_intent(user_input)
print(f"User input: {user_input}")
print(f"Predicted intent: {intent}")
print(f"Confidence: {confidence}")

user_input = "Where can I buy Toutche bikes?"
intent, confidence = classify_intent(user_input)
print(f"User input: {user_input}")
print(f"Predicted intent: {intent}")
print(f"Confidence: {confidence}")

user_input ="Can I schedule a test ride?"  # Should now be correctly classified
intent, confidence = classify_intent(user_input)
print(f"User input: {user_input}")
print(f"Predicted intent: {intent}")
print(f"Confidence: {confidence}")
print(f"Predicted intent: {intents}")
print(f"Confidence: {confidence}")